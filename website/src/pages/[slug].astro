---
import Address from "../components/Address.astro";
import BrandIdentity from "../components/BrandIdentity.astro";
import MobileStickyNavbar from "../components/MobileStickyNavbar.astro";
import ScrollTop from "../components/ScrollTop.astro";
import Sidebar from "../components/Sidebar.astro";
import EditorContent from "../components/editor/EditorContent.astro";
import { fetchStrapiAPI } from "../lib/strapi";
import { stringToUrl } from "../lib/string-utils";

const { slug } = Astro.params;

// check errori e 404
const { data } = await fetchStrapiAPI("handbooks", {
  filters: {
    url: { $eq: "https://www.bnbhouseguide.com/" + slug },
  },
  populate: {
    address: true,
    content: {
      populate: "value",
    },
  },
}).catch((e) => {
  console.error("ERROR fetching hadbooks: " + e.message);
  return [];
});

if (data.length == 0) {
  return Astro.redirect("/");
}
const handbook = data[0].attributes;

const sectionsCount = new Map<string, number>();
const sections: { name: string; hash: string; n: number }[] = [];
let n = 0;
handbook.content.forEach((c) => {
  if (c.__component === "editor.section") {
    let hash = stringToUrl(c.name);
    if (sectionsCount.has(hash)) {
      let n = Number(sectionsCount.get(hash));
      hash = hash + "-" + String(n);
      sectionsCount.set(hash, n + 1);
    } else {
      sectionsCount.set(hash, 0);
    }
    n = n + 1;
    sections.push({ name: c.name, hash: hash, n });
    c.hash = hash;
    c.n = n;
  }
});
---

<!DOCTYPE html>
<html lang="it">
  <head>
    <meta charset="UTF-8" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1.0, minimum-scale=1"
    />
    <title>Document</title>
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      rel="stylesheet"
      href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@24,700,1,0"
    />
    <link
      href="https://fonts.googleapis.com/css2?family=Merriweather:ital,wght@0,300;0,400;0,700;0,900;1,300;1,400;1,700;1,900&display=swap"
      rel="stylesheet"
    />
    <link
      href="https://fonts.googleapis.com/css2?family=Lexend+Deca:wght@100;200;300;400;500;600;700;800;900&display=swap"
      rel="stylesheet"
    />
    <link
      href="https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap"
      rel="stylesheet"
    />
    <style>
      .text-overlay-shadow {
        text-shadow: 0px 0px 5px rgb(50, 50, 50), 0px 0px 2px rgb(50, 50, 50);
      }
      body {
        font-display: optional;
      }
    </style>
  </head>
  <body
    class="max-md:flex flex-col font-serif text-neutral-900 overflow-x-hidden"
  >
    <div class="md:grid grid-cols-[220px_1fr] lg:grid-cols-[270px_1fr]">
      <div class="max-md:hidden border border-r-slate-200">
        <div class="pt-7 pl-2">
          <BrandIdentity />
        </div>
      </div>

      <div class="md:contents">
        <div class="md:contents">
          <ScrollTop />

          <main
            class="bg-white md:sticky md:top-0 font-mont px-4 md:px-6 md:pl-4 md:mb-4 z-50"
          >
            <div class="border-b border-slate-300 pt-7 pb-2">
              <h1
                class:list={[
                  !handbook.address && "translate-y-1",
                  "text-xl leading-[1.1] md:text-2xl md:leading-[1.1] font-extrabold uppercase",
                ]}
              >
                <span class="text-rose-500">
                  {handbook.apartment}
                </span>
              </h1>
              {
                handbook.address && (
                  <p class="text-sm leading-tight text-neutral-700 font-mont font-medium italic pl-px">
                    <Address address={handbook.address} />
                  </p>
                )
              }
            </div>
          </main>

          <!-- GOOGLE TRANSLATE -->
          <div class="border-b border-slate-300">
            <div id="google_translate_element" class="py-2"></div>
            <script type="text/javascript">
              function googleTranslateElementInit() {
                new google.translate.TranslateElement(
                  { pageLanguage: "en" },
                  "google_translate_element"
                );
              }
            </script>
            <script
              type="text/javascript"
              src="https://translate.google.com/translate_a/element.js?cb=googleTranslateElementInit"
            ></script>
          </div>
        </div>

        <div>
          <MobileStickyNavbar sections={sections} />

          <div class="pl-2 pr-4">
            <EditorContent content={handbook.content} />
          </div>

          <div class="md:hidden bg-rose-500 px-4 pt-10 py-14">
            <!-- INDICE -->
            <div class="text-white flex items-center gap-3 mb-4">
              <div class="rounded bg-white grid place-items-center">
                <span
                  class="skiptranslate material-symbols-outlined text-rose-500 scale-75"
                >
                  list
                </span>
              </div>
              <span class="font-bold text-xl">Indice</span>
            </div>

            <div class="relative pb-4">
              <div
                class="absolute w-px h-[calc(100%-1rem)] bg-white -translate-x-px top-0 left-3"
              >
              </div>
              <ul class="pl-6 pr-4 flex flex-col gap-1">
                {
                  sections.map((sec) => (
                    <li
                      data-section-name={sec.name}
                      class="rounded pl-2 pr-4 pt-1 pb-0.5 hover:bg-slate-100 hover:outline hover:outline-1 hover:outline-slate-200 cursor-pointer"
                    >
                      <a href={"#" + sec.hash} class="leading-[1.2]">
                        <p class="text-xs font-serif pb-0.5 text-rose-100">
                          Sezione {sec.n}
                        </p>
                        <p class="-mt-1 mb-1 text-white text-base font-medium ">
                          {sec.name}
                        </p>
                      </a>
                    </li>
                  ))
                }
              </ul>
            </div>
          </div>
        </div>
      </div>
    </div>
  </body>
</html>

<script>
  (() => {
    const header = document.querySelector("main");
    // SMOOTH LINK NAVIGATION
    document
      .querySelectorAll<HTMLAnchorElement>('a[href^="#"]')
      .forEach((link) => {
        link.addEventListener("click", (e) => {
          e.preventDefault();
          window.scrollTo({
            top:
              document.documentElement.scrollTop +
              document.querySelector(link.hash).getBoundingClientRect().y -
              (header.clientHeight + 90),
            behavior: "smooth",
          });
        });
      });

    // PROSE LINK TARGET _blank
    document.querySelectorAll<HTMLAnchorElement>(".prose a").forEach((link) => {
      link.target = "_blank";
    });
  })();
</script>

<script>
  const navLinks = document.querySelectorAll("[data-section-name]");
  const highlightSections = (...target) => {
    navLinks.forEach((l) => l.classList.remove("active"));
    target.forEach((t) => t.classList.add("active"));
  };

  // SCROLLSPY
  const scrollspy = document.querySelector("#scrollspy");
  const observer = new IntersectionObserver(
    (entries, observer) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          const target = entry.target as HTMLAnchorElement;
          const title = target.dataset.sectionTitle;
          if (title) {
            scrollspy.innerHTML = title;
            highlightSections(
              ...document.querySelectorAll(`[data-section-name="${title}"]`)
            );
          }
        }
      });
    },
    { rootMargin: "0% 0% -30% 0%" }
  );

  document
    .querySelectorAll("[data-section-title]")
    .forEach((st) => observer.observe(st));
</script>
